use rand::Rng;

fn gen_random_vector() -> Vec<i32> {
    let mut rng = rand::thread_rng();
    (0..20).map(|_| rng.gen_range(10..99)).collect()
}

fn min_adjacent_sum(data: &[i32]) -> Option<(i32, usize, usize)> {
    if data.len() < 2 {
        return None;
    }

    let mut min_sum = data[0] + data[1];
    let mut min_indices = (0, 1);

    for i in 1..data.len() - 1 {
        let sum = data[i] + data[i + 1];
        if sum < min_sum {
            min_sum = sum;
            min_indices = (i, i + 1);
        }
    }

    Some((min_sum, min_indices.0, min_indices.1))
}

fn display_result(data: &[i32]) {
    let (min_sum, idx1, idx2) = min_adjacent_sum(data).unwrap();

    println!("indexes: {}", (0..data.len()).map(|i| format!("{:>3}.", i)).collect::<String>());

    println!("data:    [{}]", data.iter().map(|x| format!("{:>2}", x)).collect::<Vec<_>>().join(", "));

    let arrow_line = " ".repeat(idx1 * 4) + "\\__ __/";
    println!("indexes:{}", arrow_line);

    println!("min adjacent sum={}+{}={} at indexes:{},{}", data[idx1], data[idx2], min_sum, idx1, idx2);
    println!();
}

fn main() {
    for _ in 0..4 { 
        let data = gen_random_vector(); 
        display_result(&data);
    }
}
